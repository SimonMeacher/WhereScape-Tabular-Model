{# -- TemplateVersion:002 MinVersion:8010 MaxVersion:* TargetType:AzureDW Objects:STAR,NORMAL,ODS TemplateType:Powershell64                                 -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Azure SQL DW                                                                                                                     -- #}
{# -- Template Name      : wsl_azdw_pscript_stage                                                                                                           -- #}
{# -- Template Version   : 8.0.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Azure SQL DW procedure using Insert                                                                      -- #}
{# --                      specifically designed for RED stage tables                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- JL: Azure SQL DW Release 1.0.0 (2017-06-06)                                                                                                           -- #}
{# -- JL: Powershell Mods 2.0.0 (2017-08-03)                                                                                                                -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% fetch table %}
{% set counter = 0 %}
{% import "wsl_azdw_utility_dml" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    Azure SQL DataWarehouse {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.0.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

Import-module -Name WslPowershellCommon -DisableNameChecking{%br%}
Import-module -Name WslPowershellAzureDW -DisableNameChecking{%br%}
$tgtConn = New-Object System.Data.Odbc.OdbcConnection{%br%}
Hide-Window{%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
$sequence = ${env:WSL_SEQUENCE}{%br%}
$jobName = ${env:WSL_JOB_NAME}{%br%}
$taskName = ${env:WSL_TASK_NAME}{%br%}
$jobId = ${env:WSL_JOB_KEY}{%br%}
$taskId = ${env:WSL_TASK_KEY}{%br%}
$return_Msg = "{{table.name}} updated."{%br%}
$status = 1{%br%}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
$deleteCount = 0{%br%}
{%- endif %}
$insertCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
  {%- endif %}
${{par}} = (WsParameterRead "{{par}}")[0]{%br%}
{%- endfor %}

{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Truncate existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  TRUNCATE TABLE [TABLEOWNER].[{{table.name}}]{%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed truncating table {{table.name}} step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
  {%- else %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Delete existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed deleting from table {{table.name}} step $step" -odbcConn $tgtConn
  $deleteCount = $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
  {%- endif %}
{%- endif %}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# -- BEGIN: Add in missing dimension key values                                                                                                            -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{%- for rel in table.relations %}
  {%- if rel.autoAddUnmatchedBusinessKeys %}
    {%- set missingBkStatus="W" %}
    {%- if rel.noWarningForUnmatchedBusinessKeys %}
      {%- set missingBkStatus="I" %}
    {%- endif %}
    {%- fetch rel.fks[0].toTable %}
    {%- set dimTable = rel.fks[0].toTable %}
    {%- if dimTable.subType == "D" %}

if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #--= Build sql for finding missing dimension keys for dimension {{ dimTable.name }}{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql_select = @"{% br %}
      {%- for fk in rel.fks %}
        {%- fetch fk.fromTable %}
        {%- fetch fk.fromColumn %}
        {%- fetch fk.toColumn %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ fk.fromTable.name }}.[{{ fk.fromColumn.name }}] AS {{ fk.toColumn.name }}{% br %}
      {%- endfor %}
      {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
      {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine}}{%br%}{%- endfor%}
      {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine}}{%br%}{%- endfor%}
  EXCEPT{% br %}
      {%- from dimTable.columns as dimCol where dimCol.businessKey %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ dimTable.name }}.[{{ dimCol.name }}] AS {{ dimCol.name }}{% br %}
      {%- endfrom %}
  FROM [TABLEOWNER].[{{ dimTable.name }}] {{ dimTable.name }} {% br %}
"@{%br%}{%br%}

      {%- if rel.detailLogForUnmatchedBusinessKeys %}
  #--============================================================================{%br%}
  #--= Log messages for auto adds to dimension {{ dimTable.name }}{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = $sql_select + " ORDER BY 1"
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to log missing dimension keys for {{ dimTable.name }} at step $step" -odbcConn $tgtConn
  foreach($row in $AzureDWResult[4]) { {%br%}
    $null = WsWrkError -Status "I" -messageType "AUTO_ADD" -Message "Auto added {{dimTable.name}} row: $($row[0])" {%br%}
  }{%br%}
      {%- endif %}
}{%br%}

if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #--= Insert missing dimension keys for dimension {{ dimTable.name }}{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  INSERT INTO [TABLEOWNER].[{{ dimTable.name }}]{% br %}
      {%- from dimTable.columns as dimCol where dimCol.artificial or dimCol.businessKey or dimCol.dss or (dimCol.name == dssDeleteTime) %}
        {%- if loop.first %}  (
        {%- else %}  ,
        {%- endif %} [{{ dimCol.name }}]{% br %}
      {%- endfrom %}
  ){% br %}
      {%- from dimTable.columns as dimCol where dimCol.artificial or dimCol.businessKey or dimCol.dss or (dimCol.name == dssDeleteTime) %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %}
        {%- if dimCol.artificial %}
          {%- from dimTable.columns as dimBk where dimBk.businessKey %}
            {%- if loop.first %} ROW_NUMBER() OVER(ORDER BY src.{{ dimBk.name }}) + COALESCE(maxkey.maxkey,0) AS {{ dimCol.sourceColumn.name }}
            {%- endif %}
          {%- endfrom %}
        {%- elseif dimCol.businessKey %} src.{{ dimCol.name }} AS {{ dimCol.name }}
        {%- else %} CAST(CURRENT_TIMESTAMP AS {{ dimCol.fullDataType }}) AS {{ dimCol.name }}
        {%- endif %}
        {%- br %}
      {%- endfrom %}
  FROM ( $sql_select ) AS src{% br %}
      {%- from dimTable.columns as dimCol where dimCol.artificial %}
  CROSS JOIN (SELECT MAX([{{ dimCol.name }}]) AS maxkey
              FROM [TABLEOWNER].[{{ dimTable.name }}]) AS maxkey{% br %}
      {%- endfrom %}
  ;{% br %}
"@
  $AzureDWResult = Run-AzureDW-RedSQL $sql ${env:WSL_TGT_DSN} ${env:WSL_TGT_USER} ${env:WSL_TGT_PWD} "Failed to insert missing dimension keys into {{ dimTable.name }} at step $step" -odbcConn $tgtConn
  $dimInsertCount = $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
  if ( $dimInsertCount -gt 0 ){ {%br%}
    $null = WsWrkAudit -Status "{{missingBkStatus}}" -Message "{{dimTable.name}} $dimInsertCount rows auto added" {%br%}
  }{%br%}
}{%br%}{%br%}
    {%- endif %}
  {%- endif %}
{%- endfor %}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #)
{# -- END: Add in missing dimension key values                                                                                                              -- #)
{# -- =============================================================================                                                                         -- #)
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# -- BEGIN: Main Insert                                                                                                                                    -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Insert new records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {{- addSetInsertTargetColumns()}}
  ){%br%}
  SELECT {{distinct()}}{%br%}
        {{addSetInsertColumnsAzureDW(addArtificialKey = true)}}
  {%- for joinLine in (table.sourceJoinDetails.join | trim | lines)%}  {{joinLine | trim}}{%br%}{%- endfor%}
  {{- addDimensionJoins(indent = "  ")}}
  {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine | trim}}{%br%}{%- endfor%}
  {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine | trim}}{%br%}{%- endfor%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed inserting into table {{table.name}} step $step" -odbcConn $tgtConn
  $insertCount = $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# -- END: Main Insert                                                                                                                                      -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# -- BEGIN: Check for bad dim key joins                                                                                                                    -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{%- for rel in table.relations %}
  {%- set dimTable="X" %}
  {%- set dimKeyColumn="X" %}
  {%- set missingBkStatus="W" %}
  {%- for fk in rel.fks %}
    {%- fetch fk.toTable %}
    {%- set dimTable=fk.toTable.name %}
    {%- from fk.toTable.columns as column where column.artificial %}
      {%- set dimKeyColumn=column.name %}
    {%- endfrom %}
  {%- endfor %}
  {%- if rel.noWarningForUnmatchedBusinessKeys %}
    {%- set missingBkStatus="I" %}
  {%- endif %}
if ( $status -eq 1 ){
{%br%}
  #--====================================================={%br%}
  #-- Check {{dimTable}} for bad key joins{%br%}
  #--====================================================={%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  SELECT COUNT(*) {%br%}
  FROM [TABLEOWNER].[{{table.name}}] {{table.name}} {%br%}
  WHERE [{{dimKeyColumn}}] = 0 {%br%}
"@
  $AzureDWResult = Run-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to count zero key rows at step $step" -odbcConn $tgtConn
  foreach($row in $AzureDWResult[4]) { {%br%}
    if ( $row[0] -gt 0 ){ {%br%}
      $null = WsWrkAudit -Status "{{missingBkStatus}}" -Message "$($row[0]) rows that could not be matched to {{dimTable}}" {%br%}
    }{%br%}
  }{%br%}
}{%br%}{%br%}
{%- endfor %}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# -- END: Check for bad dim key joins                                                                                                                      -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# -- BEGIN: Logging bad dim key join details                                                                                                               -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{%- for rel in table.relations %}
  {%- fetch rel.fks[0].toTable %}
  {%- set relTable = rel.fks[0].toTable %}
  {%- if rel.detailLogForUnmatchedBusinessKeys and not ( rel.autoAddUnmatchedBusinessKeys and relTable.subType == "D" ) %}
    {%- set dimTable="X" %}
    {%- set dimKeyColumn="X" %}
    {%- set dimBusKey="X" %}
    {%- set dimBusKeys="X" %}
    {%- set relCntr=0 -%}
    {%- for fk in rel.fks %}
      {%- set relCntr=relCntr+1 -%}
      {%- fetch fk.toTable %}
      {%- set dimTable=fk.toTable.name %}
      {%- from fk.toTable.columns as column where column.artificial %}
        {%- set dimKeyColumn=column.name %}
      {%- endfrom %}
      {%- from table.columns as stageColumn where stageColumn.name == dimKeyColumn %}
        {%- set bkColCntr = 0 -%}
        {%- if loop.first -%}
          {%- for relLine in (stageColumn.description | trim | lines)%}
            {%- set bkColCntr=bkColCntr+1 -%}
            {%- if relCntr == bkColCntr -%}
              {%- if relLine.indexOf(dimTable+".") != -1 -%}
                {%- set dimBusKey = relLine | slice(0,relLine.indexOf("=")) -%}
             {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endfrom %}
      {%- if loop.first %}
        {%- set dimBusKeys="CAST(" + dimBusKey + " AS VARCHAR(255))" %}
      {%- else %}
        {%- set dimBusKeys=dimBusKeys + " || ' | ' || CAST(" + dimBusKey + " AS VARCHAR(255))" %}
      {%- endif %}
    {%- endfor %}
if ( $status -eq 1 ){
{%br%}
  #--====================================================={%br%}
  #-- Fetch {{dimTable}} lookup failures{%br%}
  #--====================================================={%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  SELECT DISTINCT {{dimBusKeys}} {%br%}
  FROM [TABLEOWNER].[{{table.name}}] {{table.name}} {%br%}
  WHERE [{{dimKeyColumn}}] = 0 {%br%}
  ORDER BY 1
"@
  $AzureDWResult = Run-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to log missing dimension keys for {{ dimTable }} at step $step" -odbcConn $tgtConn
  foreach($row in $AzureDWResult[4]) { {%br%}
    $null = WsWrkError -Status "I" -messageType "LOOKUP" -Message "Unmatched key lookup on {{dimTable}} for business key: $($row[0])" {%br%}
  }{%br%}
}{%br%}{%br%}
  {%- endif %}
{%- endfor %}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# -- END: Logging bad dim key join details                                                                                                                 -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
if ( $insertCount -eq $null ) {
  $insertCount = 0
}{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
if ( $deleteCount -eq $null ) {
  $deleteCount = 0
}{%br%}
$metaResult = WsWrkTask -Inserted $insertCount -Deleted $deleteCount{%br%}
{%- else %}
$metaResult = WsWrkTask -Inserted $insertCount{%br%}
{%- endif %}
if ( $metaResult -lt -1 ){
  $status = -2{%br%}
  $return_Msg = "Failure executing WsWrkTask. $insertCount records inserted."{%br%}
}

#-- Work out return message{%br%}
if ( $status -eq 1 ) {
{%br%}
  $return_Msg = "{{table.name}} updated.  "{%br%}
  $return_Msg += "$insertCount records inserted. "{%br%}
  {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
  $return_Msg += "$deleteCount records deleted.  "{%br%}
  {%- endif %}
}

$status
$return_Msg

$tgtConn.Dispose()
