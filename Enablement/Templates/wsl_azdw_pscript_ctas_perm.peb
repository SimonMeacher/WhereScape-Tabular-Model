{# -- TemplateVersion:002 MinVersion:8010 MaxVersion:* TargetType:AzureDW Objects:STAR,NORMAL,ODS TemplateType:Powershell64                                 -- #}
{# --               `                                                                                                                                       -- #}
{# --    (c) WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Azure SQL DW                                                                                                                     -- #}
{# -- Template Name      : wsl_azdw_pscript_ctas_perm                                                                                                       -- #}
{# -- RED Version        : 8.0.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Azure SQL DW procedure specifically                                                                      -- #}
{# --                      specifically designed for all RED non-stage tables                                                                               -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- TK: Initial Release (2017-10-20)                                                                                                                      -- #}
{# -- PC: Fixed zero key selects (2017-24-10)                                                                                                               -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% fetch table %}
{% set counter = 0 %}
{% import "wsl_azdw_utility_dml" %}
{% import "wsl_azdw_utility_ctas" %}
{% set dssDeleteTime = "dss_delete_time" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    Azure SQL DW {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.0.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

Import-module -Name WslPowershellCommon -DisableNameChecking{%br%}
Import-module -Name WslPowershellAzureDW -DisableNameChecking{%br%}
$tgtConn = New-Object System.Data.Odbc.OdbcConnection{%br%}
Hide-Window{%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
$sequence = ${env:WSL_SEQUENCE}{%br%}
$jobName = ${env:WSL_JOB_NAME}{%br%}
$taskName = ${env:WSL_TASK_NAME}{%br%}
$jobId = ${env:WSL_JOB_KEY}{%br%}
$taskId = ${env:WSL_TASK_KEY}{%br%}
$return_Msg = "{{table.name}} updated."{%br%}
$status = 1{%br%}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}
{#- Work out if we are doing logical deletes -#}
{%- set dssDeleteTimePresent = false -%}
{%- from table.columns as column where column.name == dssDeleteTime -%}
  {%- set dssDeleteTimePresent = true -%}
{%- endfrom -%}
{#- Work out if there is a surrogate key -#}
{%- set hasArtificial = false -%}
{%- from table.columns as artificialKey where artificialKey.artificial -%}
  {%- if loop.first -%}
    {%- set hasArtificial = true -%}
  {%- endif -%}
{%- endfrom -%}
{#- Work out whether or not there are any changing columns -#}
{%- set hasChangingCols = false -%}
{%- from table.columns as changingCol where not ( changingCol.businessKey or changingCol.dss or changingCol.artificial or changingCol.name == dssDeleteTime or changingCol.slowlyChanging) -%}
  {%- if loop.first -%}
    {%- set hasChangingCols = true -%}
  {%- endif -%}
{%- endfrom -%}

{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
$deleteCount = 0{%br%}
{%- endif %}
$insertCount = 0{%br%}
$ctasCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
  {%- endif %}
${{par}} = (WsParameterRead "{{par}}")[0]{%br%}
{%- endfor %}

{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Truncate existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  TRUNCATE TABLE [TABLEOWNER].[{{table.name}}]{%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed truncating table {{table.name}} step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
  {%- else %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Delete existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed deleting from table {{table.name}} step $step" -odbcConn $tgtConn
  $deleteCount = $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
  {%- endif %}
{%- endif %}
{%- if settings.insertZeroKeyRecord %}
  {% from table.columns as column where column.artificial %}
    {% if loop.first %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Include 0 key row for when lookup to this table is null{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {%- for column in table.columns %}
    {%- if loop.first %}
  ( [{{ column.name }}]{% br %}
    {%- else %}
  , [{{ column.name }}]{% br %}
    {%- endif -%}
  {%- endfor %}
  ){%br%}
  SELECT
  {%- for column in table.columns -%}
    {%- if not loop.first %}     , {% else %} {% endif %}
    {%- if column.artificial %}0{%br%}
    {%- elseif column.sourceSystem or column.dssVersion %}1{%br%}
    {%- elseif column.currentFlag %}'Y'{%br%}
    {%- elseif column.updateTime or column.createTime %}CAST(GETDATE() AS DATETIME){%br%}
    {%- elseif column.dssStartDate %}{{settings.changeDetectionStartInitial}}{%br%}
    {%- elseif column.dssEndDate %}{{settings.changeDetectionEndCurrent}}{%br%}
    {%- elseif column.zeroKeyValue != "" %}
      {%- if column.dataType == "char" or column.dataType == "varchar" or column.dataType == "nvarchar" %}SUBSTRING('{{column.zeroKeyValue}}',1,{{column.dataTypeSize}}){%br%}
      {%- else %}{{column.zeroKeyValue}}{%br%}
      {%- endif %}
    {%- else %}CAST(NULL  AS {{column.fullDataType}}){%br%}
    {%- endif %}
  {%- endfor %}
  WHERE NOT EXISTS (
    SELECT 1{%br%}
    FROM   [TABLEOWNER].[{{table.name}}]{%br%}
  {%- from table.columns as column where column.artificial %}
    {%- if loop.first %}    WHERE  [{{column.name}}] = 0{%br%}{%- endif %}
  {%- endfrom %}
  ){%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed zero key insert into table {{table.name}} step $step" -odbcConn $tgtConn
  $insertCount += $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
    {%- endif -%}
  {%- endfrom -%}
{%- endif %}

if ( $status -eq 1 ){
  #--============================================================================{%br%}
  #-- DROP temp table to prepare for CTAS{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  IF OBJECT_ID('[TABLEOWNER].[{{table.name}}]_WSLTMP') IS NOT NULL{% br %}
    DROP TABLE [TABLEOWNER].[{{table.name}}]_WSLTMP{% br %}
  ;{% br %}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to ctas table {{ table.name }} step $step" -odbcConn $tgtConn -notrans
  $updateCount += $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ){
  #--============================================================================{%br%}
  #-- CREATE table to upsert rows{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  CREATE TABLE [TABLEOWNER].[{{ table.name }}]_WSLTMP{%br%}
  WITH ({% br %}
  {%- if table.storage.optionalCreateClause != "" %}
    {{- addOptionalCreateClause ( indent = "    " ) -}}
  {%- else %}    DISTRIBUTION = ROUND_ROBIN{% br %}{% endif %}
  ){% br %}
  AS{%br%}
  {#-                         -#}
  {#- C H A N G E D   R O W S -#}
  {#-                          #}
  {%- if hasChangingCols -%}
    {{- addChangedRowSelect ( indent = "  " ) -}}
    {{- addFromClause ( indent = "  " ) -}}
    {{- addJoinToTarget ( indent = "  ", joinType = "INNER" ) -}}
    {{- addWhereClause ( indent = "  " ) -}}
    {%- if table.sourceJoinDetails.where | trim != "" %}
      {{- addChangedWhere ( indent = "  ", whereType = "AND", comparison = "<>", compareType = "OR " ) }}
    {%- else -%}
      {{- addChangedWhere ( indent = "  ", whereType = "WHERE", comparison = "<>", compareType = "OR   " ) }}
    {%- endif -%}
    {%- if dssDeleteTimePresent %}
    OR {{ table.name }}.{{ dssDeleteTime }} IS NOT NULL{% br %}
    {%- endif -%}
    {{- addGroupByClause ( indent = "  " ) -}}
  {#-                             -#}
  {#- U N C H A N G E D   R O W S -#}
  {#-                              #}
  UNION ALL{% br %}
  {%- endif -%}
  {{- addUnchangedRowSelect ( indent = "  " ) -}}
  {{- addFromClause ( indent = "  " ) -}}
  {{- addJoinToTarget ( indent = "  ", joinType = "RIGHT OUTER" ) -}}
  {{- addChangedWhere ( indent = "  ", whereType = "WHERE", comparison = "=", compareType = "AND  " ) -}}
  {%- from table.columns as bkCol where bkCol.businessKey -%}
    {%- if loop.first %}  OR (
    {%- else %}   AND
    {%- endif %} {{ bkCol.source }} IS NULL{% br %}
    {%- if loop.last %}  ){% br %}{% endif %}
  {%- endfrom -%}
  {{- addGroupByClause ( indent = "  " ) -}}
  {#-                               -#}
  {#- L O G I C A L   D E L E T E S -#}
  {#-                               -#}
  {%- if dssDeleteTimePresent %}
  UNION ALL{% br %}
    {{- addDeletedRowSelect ( indent = "  " ) -}}
    {{- addFromClause ( indent = "  " ) -}}
    {{- addJoinToTarget ( indent = "  ", joinType = "RIGHT OUTER" ) -}}
    {{- addRowCountJoin ( indent = "  " ) -}}
    {{- addWhereClause ( indent = "  " ) -}}
    {%- if table.sourceJoinDetails.where | trim != "" -%}
      {{- addDeletedWhere ( indent = "  ", whereType = "AND" ) -}}
    {%- else -%}
      {{- addDeletedWhere ( indent = "  ", whereType = "WHERE" ) -}}
    {%- endif -%}
    {{- addGroupByClause ( indent = "  " ) -}}
  {%- endif -%}
  {#-                 -#}
  {#- N E W   R O W S -#}
  {#-                  #}
  UNION ALL{% br %}
  {{- addNewRowSelect ( indent = "  " ) -}}
  {{- addFromClause ( indent = "  " ) -}}
  {{- addJoinToTarget ( indent = "  ", joinType = "LEFT OUTER" ) -}}
  {{- addMaxKeyJoin ( indent = "  " ) -}}
  {{- addWhereClause ( indent = "  " ) -}}
  {%- if table.sourceJoinDetails.where | trim != "" %}  AND {% else %}  WHERE {% endif -%}
  {%- from table.columns as bkCol where bkCol.businessKey -%}
    {%- if not loop.first %}  AND {% endif %}{{ table.name }}.[{{- bkCol.name }}] IS NULL{% br %}
  {%- endfrom %}
  {{- addGroupByClause ( indent = "  " ) }}
  OPTION ( LABEL = 'CTAS : Upsert' ){%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to ctas table {{ table.name }} step $step" -odbcConn $tgtConn -notrans
  $ctasCount += $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- RENAME original table{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  RENAME OBJECT [TABLEOWNER].[{{ table.name }}] TO {{ table.name }}_WSLTMP_OLD
  ;
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to rename table {{ table.name }} step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- RENAME newly created table{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  RENAME OBJECT [TABLEOWNER].[{{ table.name }}]_WSLTMP TO {{ table.name }}
  ;
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to rename table {{ table.name }} step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- DROP original table{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DROP TABLE [TABLEOWNER].[{{ table.name }}]_WSLTMP_OLD{%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to original table. step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}

#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
if ( $insertCount -eq $null ) {
  $insertCount = 0
}{%br%}
if ( $updateCount -eq $null ) {
  $ctasCount = 0
}{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
if ( $deleteCount -eq $null ) {
  $deleteCount = 0
}{%br%}
$metaResult = WsWrkTask -Inserted $insertCount -Replaced $ctasCount -Deleted $deleteCount{%br%}
{%- else %}
$metaResult = WsWrkTask -Inserted $insertCount -Replaced $ctasCount{%br%}
{%- endif %}
if ( $metaResult -lt -1 ){
  $status = -2{%br%}
  $return_Msg = "Failure executing WsWrkTask. $insertCount records inserted. $ctasCount records CTAS'd"{%br%}
}

#-- Work out return message{%br%}
if ( $status -eq 1 ) {
{%br%}
  $return_Msg = "{{table.name}} updated.  "{%br%}
  $return_Msg += "$insertCount records inserted. $ctasCount records CTAS'd. "{%br%}
  {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
  $return_Msg += "$deleteCount records deleted.  "{%br%}
  {%- endif %}
}

$status
$return_Msg

$tgtConn.Dispose()
