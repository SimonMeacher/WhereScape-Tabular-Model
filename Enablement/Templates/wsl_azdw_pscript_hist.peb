{# -- TemplateVersion:002 MinVersion:8010 MaxVersion:* TargetType:AzureDW Objects:STAR,NORMAL,ODS TemplateType:Powershell64                                 -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Azure SQL DataWarehouse                                                                                                          -- #}
{# -- Template Name      : wsl_azdw_pscript_hist                                                                                                            -- #}
{# -- Template Version   : 8.0.1.0                                                                                                                          -- #}
{# -- Description        : This template creates an Azure SQL DataWarehouse procedure specifically                                                          -- #}
{# --                      specifically designed for all RED non-stage tables                                                                               -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- TK: AzureDW Release 1.0.0 (2017-06-27)                                                                                                                -- #}
{# -- TK: Powershell Mods 2.0.0 (2017-08-03)                                                                                                                -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% fetch table %}
{% set counter = 0 %}
{% import "wsl_azdw_utility_dml" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    Azure SQL DataWarehouse {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.0.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

{%- set tempTableName = "#" + table.name + "_wsltmp" -%}

Import-module -Name WslPowershellCommon -DisableNameChecking{%br%}
Import-module -Name WslPowershellAzureDW -DisableNameChecking{%br%}
$tgtConn = New-Object System.Data.Odbc.OdbcConnection{%br%}
Hide-Window{%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
$sequence = ${env:WSL_SEQUENCE}{%br%}
$jobName = ${env:WSL_JOB_NAME}{%br%}
$taskName = ${env:WSL_TASK_NAME}{%br%}
$jobId = ${env:WSL_JOB_KEY}{%br%}
$taskId = ${env:WSL_TASK_KEY}{%br%}
$return_Msg = "{{table.name}} updated."{%br%}
$status = 1{%br%}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
$deleteCount = 0{%br%}
{%- endif %}
$insertCount = 0{%br%}
$updateCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
  {%- endif %}
${{par}} = (WsParameterRead "{{par}}")[0]{%br%}
{%- endfor %}

if ( $status -eq 1 ){
  #--============================================================================
  #-- Drop temp table
  #--============================================================================
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  IF OBJECT_ID('tempdb..{{ tempTableName }}') IS NOT NULL{% br %}
  DROP TABLE {{ tempTableName }}{% br %}
  ;{% br %}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Error occurred dropping temporary table. step $step" -odbcConn $tgtConn
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}

{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Truncate existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
    TRUNCATE TABLE [TABLEOWNER].[{{table.name}}]{%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed truncating table {{table.name}} step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
  {%- else %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Delete existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed deleting from table {{table.name}} step $step" -odbcConn $tgtConn
  $deleteCount = $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
  {%- endif %}
{%- endif %}

{%- if settings.insertZeroKeyRecord %}
  {% from table.columns as column where column.artificial %}
    {% if loop.first %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Include 0 key row for when lookup to this table is null{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {{- addSetInsertTargetColumns()}}
  ){%br%}
  SELECT{%br%}
  {{- defaultColumnsAzureDW()}}
  WHERE NOT EXISTS ( SELECT 1{%br%}
                     FROM   [TABLEOWNER].[{{table.name}}]{%br%}
{%- for column in table.columns %}
{%- if column.artificial %}                     WHERE  [{{column.name}}] = 0{%br%}{%- endif %}
{%- endfor %}
                   ){%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed zero key insert into table {{table.name}} step $step" -odbcConn $tgtConn
  $insertCount += $AzureDWResult[1]
  $return_Msg = $AzureDWResult[2]{%br%}
}{%br%}
    {%- endif -%}
  {%- endfrom -%}
{%- endif %}

{# -- Update changed rows -- #}
{%- if settings.update %}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- CREATE temporary table for expiring row update{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  CREATE TABLE {{ tempTableName }}{%br%}
  WITH ({% br %}
  {%- if table.storage.optionalCreateClause != "" %}    {{table.storage.optionalCreateClause}}
  {%- else %}    DISTRIBUTION = ROUND_ROBIN{% endif %}{% br %}
  ){% br %}
  AS{%br%}
  SELECT {{- addSetInsertDestScdEndingColumns()}}
  {{table.sourceJoinDetails.join}}{%br%}
  {{addJoinToTarget( indent = "  ", joinType = "INNER")}}
  {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine | trim}}{%br%}{%- endfor%}
  {% if table.sourceJoinDetails.where | trim != "" %}{{addCurrentFlagStmt(currentFlagValue = "Y", stmtType = "AND")}}{%br%}
  {% else %}{{addCurrentFlagStmt(currentFlagValue = "Y", stmtType = "WHERE")}}{%br%}{%endif%}
  {{- addSlowlyChangingWhere()}}
  {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine | trim}}{%br%}{%- endfor %}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to create temporary table {{tempTableName}} step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- UPDATE to end date expiring rows{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  UPDATE [TABLEOWNER].[{{table.name}}]
  {{addUpdateSetScdExpiring()}}
  FROM {{ tempTableName }} src{%br%}
  {{ addJoinToAliasedSource() }}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to update expiring rows. step $step" -odbcConn $tgtConn
  $updateCount += $AzureDWResult[1]{%br%}
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- DROP temporary table for expiring row update{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DROP TABLE {{ tempTableName }}{%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to drop temporary table {{tempTableName}}. step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}
{% endif %}

{%br%}

if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- CREATE temporary table for changed row update{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  CREATE TABLE {{ tempTableName }}{%br%}
  WITH ({% br %}
  {%- if table.storage.optionalCreateClause != "" %}    {{table.storage.optionalCreateClause}}
  {%- else %}    DISTRIBUTION = ROUND_ROBIN{% endif %}{% br %}
  ){% br %}
  AS{%br%}
  SELECT {{- addSetInsertDestScdExistingColumns()}}
  {{table.sourceJoinDetails.join}}{%br%}
  {{addJoinToTarget(indent = "  ", joinType = "INNER")}}
  {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine | trim}}{%br%}{%- endfor%}
  {% if table.sourceJoinDetails.where | trim != "" %}{{addCurrentFlagStmt(currentFlagValue = "Y", stmtType = "AND")}}{%br%}
  {% else %}{{addCurrentFlagStmt(currentFlagValue = "Y", stmtType = "WHERE")}}{%br%}{%endif%}
  {{- addChangedRecordWhere( stmtType = "AND" )}}
  {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine | trim}}{%br%}{%- endfor %}
  ;
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to create temporary table {{tempTableName}} step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- UPDATE changed rows{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  UPDATE [TABLEOWNER].[{{table.name}}]
  {{addUpdateSetScdExisting()}}
  FROM {{ tempTableName }} src{%br%}
  {{addJoinToAliasedSource()}}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to update changed rows. step $step" -odbcConn $tgtConn
  $updateCount += $AzureDWResult[1]{%br%}
  $return_Msg = $AzureDWResult[2]{%br%}
}

if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- DROP temporary table for changed row update{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DROP TABLE {{ tempTableName }}{%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to drop temporary table {{tempTableName}}. step $step" -odbcConn $tgtConn -notrans
  $return_Msg = $AzureDWResult[2]{%br%}
}
{# Insert new records #}
{% if settings.insert %}
if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- INSERT new rows{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  INSERT INTO [TABLEOWNER].[{{table.name}}]
  {{- addSetInsertTargetColumns()}}
  ){%br%}
  SELECT {{addSetInsertAliasedSourceColumns() -}}
  FROM (
    SELECT {{distinct()}}{{- addSetInsertColumnsAzureDW()}}
    {%- for joinLine in (table.sourceJoinDetails.join | trim | lines)%}  {{joinLine | trim}}{%br%}{%- endfor%}
    {{addJoinToTarget(indent = "    ", joinType = "LEFT OUTER")}}
    {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine | trim}}{%br%}{%- endfor%}
    {% if table.sourceJoinDetails.where | trim != "" %}{{addCurrentFlagStmt(currentFlagValue = "IS NULL", stmtType = "AND")}}{%br%}
    {% else %}{{addCurrentFlagStmt(currentFlagValue = "IS NULL", stmtType = "WHERE")}}{%br%}{%endif%}
    {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine | trim}}{%br%}{%- endfor%}
    UNION ALL{%br%}
    SELECT {{distinct()}}{{- addSetInsertColumnsAzureDW(firstChangingVersion = false)}}
    {%- for joinLine in (table.sourceJoinDetails.join | trim | lines)%}  {{joinLine | trim}}{%br%}{%- endfor%}
    {{addJoinToTarget(indent = "    ", joinType = "LEFT OUTER")}}
    {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine | trim}}{%br%}{%- endfor%}
    {% if table.sourceJoinDetails.where | trim != "" %}{{addCurrentFlagStmt(currentFlagValue = 'P', stmtType = "AND")}}{%br%}
    {% else %}{{addCurrentFlagStmt(currentFlagValue = 'P', stmtType = "WHERE")}}{%br%}{%endif%}
    {{- addSlowlyChangingWhere()}}
    {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine | trim}}{%br%}{%- endfor%}
  ) AS src{%br%}
  {{- addLastSurrogateCrossJoin()}}{%br%}
  ;{%br%}
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to insert new rows. step $step" -odbcConn $tgtConn
  $insertCount += $AzureDWResult[1]{%br%}
  $return_Msg = $AzureDWResult[2]{%br%}
}
{% endif %}

{%br%}
if ( $status -eq 1 ) {
{%br%}
  #--============================================================================{%br%}
  #-- UPDATE to tidy up{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  UPDATE [TABLEOWNER].[{{table.name}}]{%br%}
  {{addCurrentFlagStmt(stmtType = "SET", currentFlagValue = 'N')}}{%br%}
  {{addCurrentFlagStmt(currentFlagValue = 'P', stmtType = "WHERE")}}{%br%}
  ;
"@
  $AzureDWResult = Run-AzureDW-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to update pending rows. step $step" -odbcConn $tgtConn
  $updateCount += $AzureDWResult[1]{%br%}
  $return_Msg = $AzureDWResult[2]{%br%}
}

#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
if ( $insertCount -eq $null ) {
  $insertCount = 0
}{%br%}
if ( $updateCount -eq $null ) {
  $updateCount = 0
}{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
if ( $deleteCount -eq $null ) {
  $deleteCount = 0
}{%br%}
$metaResult = WsWrkTask -Inserted $insertCount -Updated $updateCount -Deleted $deleteCount{%br%}
{%- else %}
$metaResult = WsWrkTask -Inserted $insertCount -Updated $updateCount{%br%}
{%- endif %}
if ( $metaResult -lt -1 ){
  $status = -2{%br%}
  $return_Msg = "Failure executing WsWrkTask. $insertCount records inserted. $updateCount records updated"{%br%}
}

#-- Work out return message{%br%}
if ( $status -eq 1 ) {
{%br%}
  $return_Msg = "{{table.name}} updated.  "{%br%}
  $return_Msg += "$insertCount records inserted. $updateCount records updated. "{%br%}
  {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
  $return_Msg += "$deleteCount records deleted.  "{%br%}
  {%- endif %}
}

$status
$return_Msg

$tgtConn.Dispose()
