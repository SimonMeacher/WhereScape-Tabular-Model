{# -- TemplateVersion:002 MinVersion:8010 MaxVersion:* TargetType:AzureDW Objects:* TemplateType:Powershell64                                               -- #}
{#                                                                                                                                                          -- #}
{# --    (c) WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Azure SQL Data Warehouse                                                                                                         -- #}
{# -- Template Name      : wsl_azdw_pscript_load                                                                                                            -- #}
{# -- Template Version   : 8.0.1.0                                                                                                                          -- #}
{# -- Description        : This template creates an Azure Powershell script specifically                                                                    -- #}
{# --                      designed for all RED load tables                                                                                                 -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- TK: Azure SQL DW Release 1.0.0 (2017-08-03)                                                                                                           -- #}
{# -- TK: Altered ODBC extracts to use ODBC class from WslPowershellCommon 1.0.1 (2018-11-23)                                                               -- #}
{# -- TK: Removed Get-ExtendedProperty function from script 1.0.2 (2018-11-23)                                                                              -- #}
{# -- PC: Fixed temp file removal issues (2019-09-25)                                                                                                       -- #}
{# -- PC: Fixed missing directory in load from BLOB store (2020-12-23)                                                                                      -- #}
{# -- PM: Added COPY INTO for Load from Data lake gen2 (2021-03-30)                                                                                         -- #}
{# -- PM: Azure storage module updated to Az.Storage From Azure.Storage                                                                                     -- #}
#=============================================================================={%- br %}
# DBMS Name        :    {{table.dbType.name}}{%- br %}
# Template Version :    8.0.1.0{%- br %}
# Description      :    Load {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
{% if (table.loadInfo.sourceSchema) is defined %}
{% if (table.loadInfo.sourceSchema != "") and (table.loadInfo.sourceTables != "") %}
# Source Schema    :    {{table.loadInfo.sourceSchema}}{%- br %}
# Source Table     :    {{table.loadInfo.sourceTables}}{%- br %}
{% endif %}
{% endif %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}
Import-Module WslPowershellCommon -DisableNameChecking{%- br %}
Hide-Window{%- br %}
{%- br %}

{# --# ========================================================#}
{# --# = Check for Source File Types#}
{# --# ========================================================#}
{%- fetch table.loadInfo.sourceConnection -%}
{%- set fileType ="" -%}
{%- set filePattern = "false" -%}
{%- if (table.loadInfo.sourceConnectionType.name == "Configured Source Connection") or (table.loadInfo.sourceConnectionType.name == "Windows")-%}
 {%- if table.loadInfo.uiConfigLoadProperties.fileType is defined -%}
  {%- set fileType = table.loadInfo.uiConfigLoadProperties.fileType | lower  -%}
    {%- if fileType == 'delimited' -%}
        {%- set fileType = 'csv' -%}
    {%- endif -%}
 {%- elseif table.loadInfo.sourceFile.name != "" -%}
    {%- set fileType = 'fixwidth' -%}
    {% if table.loadInfo.sourceFile.fieldDelimiter | trim != '' %}
        {%- set fileType = 'csv' -%}
    {%- endif -%}
    {%- set foo = table.loadInfo.sourceFile.name -%}
    {%- set lngth = foo | length -%}
    {%- set dot = foo.indexOf(".")+1 -%}
    {%- set fileEx = foo | slice(dot, lngth) -%}
    {%- if fileEx contains "*" and not fileEx == '*'-%}
        {%- set lngth = foo | length -%}
        {%- set dot = foo.indexOf("*")+1 -%}
        {%- set fileEx = foo | slice(dot, lngth) -%}
        {%- set lngth = fileEx | length -%}
        {%- set dot = fileEx.indexOf("*")+1 -%}
        {%- set fileEx = fileEx | slice(dot, lngth) -%}
        {%- set filePattern = "true" -%}
    {%- endif -%}
    {%- if fileEx contains "." -%}
        {%- set lngth = foo | length -%}
        {%- set dot = foo.indexOf(".")+1 -%}
        {%- set fileEx = foo | slice(dot, lngth) -%}
        {%- set lngth = fileEx | length -%}
        {%- set dot = fileEx.indexOf(".")+1 -%}
        {%- set fileEx = fileEx | slice(dot, lngth) -%}
        {%- set foo = table.loadInfo.sourceFile.name | replace({"." + fileEx :""}) -%}
        {%- set lngth = foo | length -%}
        {%- set dot = foo.indexOf(".")+1 -%}
        {%- set fileSheet = foo | slice(dot, lngth) -%}
        {%- set fileName = table.loadInfo.sourceFile.name | replace({"." + fileSheet :""}) -%}
        {%- set fileNameCsv = fileName | replace({fileEx:"csv"}) -%}
    {%- endif -%}
    {%- if ['json','parquet','xml','avro','orc'] contains fileEx -%}
        {%- set fileType = fileEx -%}
    {%- elseif ['xls','xlsx'] contains fileEx-%}
        {%- set fileType = 'xlsx' -%}
    {%- endif -%}
  {%- endif -%}
{%- endif -%}
# ========================================================
# = Check Source Connection & Assign Run Mode
# ========================================================
{%- if (table.loadInfo.sourceConnectionType.name == "Configured Source Connection") and (table.loadInfo.sourceFile.path contains 's3://') -%}
{% set RunMode = "S3" %}{%- br %}
$runMode = "S3" {%- br %}
{%- elseif (table.loadInfo.sourceConnectionType.name == "Configured Source Connection") and  (table.loadInfo.sourceFile.path contains 'gs://') -%}
{% set RunMode = 'GCS' %}{%- br %}
$runMode = "GCS" {%- br %}
{%- elseif (table.loadInfo.sourceConnectionType.name == "Configured Source Connection") and  (table.loadInfo.sourceFile.path contains 'https://') -%}
{% set RunMode = 'AZ' %}{%- br %}
$runMode = "AZ" {%- br %}
{%- elseif (table.loadInfo.sourceConnectionType.name == "Configured Source Connection") and  (table.loadInfo.sourceFile.path contains 'GoogleDriveFiles') -%}
{% if (table.loadInfo.uiConfigLoadProperties.fileID != "")  %}{% br %}
{% set RunMode = 'GD' %}{%- br %}
$runMode = "GD" {%- br %}
{%- endif %}
{%- elseif (table.loadInfo.sourceConnectionType.name == "ODBC") or (table.loadInfo.sourceConnectionType.name == "Database") -%}
{% set RunMode = 'Database' %}{%- br %}
$runMode = "Database" {%- br %}
{%- else -%}
{% set RunMode = 'Windows' %}{%- br %}
$runMode = "Windows" {%- br %}
{%- endif %}

{%- if fileType == 'xlsx' %}
{%- br %}
# ========================================================
# = Convert Excel Sheet To Csv File
# ========================================================
    Function ExcelToCsv ($File,$SheetName) {
         $Excel = New-Object -ComObject Excel.Application
         $wb = $Excel.Workbooks.Open($File)
         $Excel.Visible = $false
         $Excel.displayAlerts = $false
         $x = $File | Select-Object Directory, BaseName
         $n = [System.IO.Path]::Combine(${env:WSL_WORKDIR}, (($x.BaseName, 'csv') -join "."))

         foreach ($ws in $wb.Worksheets) {
                if($ws.name() -eq $SheetName){
             $ws.SaveAs($n, 6)
          }
         }
         $Excel.Quit()
    }
{%- endif %}

function Print-Log { {%- br %}
    try { {%- br %}
        $logStream.Dispose(){%- br %}
        $logReader = New-Object IO.StreamReader($fileAud){%- br %}
        while( ! $logReader.EndOfStream) { {%- br %}
            [Console]::WriteLine($logReader.ReadLine())
        } {%- br %}
        $logReader.Dispose()
    }{%- br %}
    catch { {%- br %}
        [Console]::WriteLine($_.Exception.Message)
        [Console]::WriteLine("Failed to print log file")
    }{%- br %}
} {%- br %}
{%- br %}
{%- if (table.loadInfo.sourceConnectionType.name == "ODBC") or (table.loadInfo.sourceConnectionType.name == "Database") %}
Function Replace-Parameters($stringVal) { {%- br %}
    while([regex]::IsMatch($stringVal,'\$P.+\$')) { {%- br %}
        $startPos      = $stringVal.IndexOf('$P'){%- br %}
        $work          = $stringVal.SubString($startPos + 2){%- br %}
        $endPos        = $work.IndexOf('$'){%- br %}
        $paramName     = $work.SubString(0, $endPos){%- br %}
        $param         = WsParameterRead -ParameterName $paramName{%- br %}
        $paramVal      = $param[0]
        $replaceString = '$P' + $paramName + '$'{%- br %}
        $stringVal     = $stringVal.Replace($replaceString,$paramVal){%- br %}
    }{%- br %}
    return $stringVal
}{%- br %}
{%- br %}
{%- else %}
Function Replace-WslTags($stuff) { {%- br %}
    if([string]::IsNullOrWhitespace($stuff)) { {%- br %}
        return $stuff{%- br %}
    }{%- br %}
    if($stuff.Contains('$SEQUENCE$')) { {%- br %}
        $stuff = $stuff.Replace('$SEQUENCE$',${env:WSL_SEQUENCE}){%- br %}
    }{%- br %}
    if([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
        # If $stuff contains two or more $s and the $SEQUENCE$ string is not detected{%- br %}
        # or has already been replaced then we assume a date{%- br %}
        while([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
            $startPos       = $stuff.IndexOf('$'){%- br %}
            $work           = $stuff.SubString($startPos + 1){%- br %}
            $endPos         = $work.IndexOf('$'){%- br %}
            $suppliedFormat = $work.SubString(0, $endPos){%- br %}
            $dateFormat     = $suppliedFormat.Replace('YY','yy').Replace('DD','dd').Replace('HH','hh').Replace('MI','mm').Replace('SS','ss'){%- br %}
            $dateString     = (Get-Date -f $dateFormat){%- br %}
            $replaceString  = '$' + $suppliedFormat + '$'{%- br %}
            $stuff          = $stuff.Replace($replaceString,$dateString){%- br %}
        }{%- br %}
    }{%- br %}
    if($stuff.Contains('$')) { {%- br %}
        ${env:warn} = $true{%- br %}
        $logStream.WriteLine("Unclosed '$' tag in '$stuff'"){%- br %}
        $logStream.WriteLine("Unclosed '$' will be removed"){%- br %}
        $stuff      = $stuff.Replace('$',''){%- br %}
    }{%- br %}
    return $stuff.Trim(){%- br %}
}{%- br %}
{% endif %}
Function Gzip-File { {%- br %}
    param({%- br %}
        [string]$inFile         = $(throw "No input file specified"),{%- br %}
        [string]$outFile        = $(Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "$((gci $inFile).name).gz"),{%- br %}
        [switch]$removeOriginal = $false{%- br %}
    ){%- br %}
    $input      = New-Object IO.FileStream             $InFile,  ([IO.FileMode]::Open),   ([IO.FileAccess]::Read),  ([IO.FileShare]::Read){%- br %}
    $output     = New-Object IO.FileStream             $OutFile, ([IO.FileMode]::Create), ([IO.FileAccess]::Write), ([IO.FileShare]::None){%- br %}
    $gzipStream = New-Object IO.Compression.GzipStream $Output,  ([IO.Compression.CompressionLevel]::Fastest){%- br %}
    $input.CopyTo($gzipStream){%- br %}
    $gzipStream.Dispose(){%- br %}
    $output.Dispose(){%- br %}
    $input.Dispose(){%- br %}
    $logStream.WriteLine("File '$inFile' compressed to '$outFile'"){%- br %}

    if($removeOriginal) { {%- br %}
        Remove-Item -Path $inFile{%- br %}
    }{%- br %}
    return (gci $outfile).FullName{%- br %}
}{%- br %}
{%- br %}
Function Load-Data { {%- br %}
    {%- br %}
    $logStream.WriteLine(""){%- br %}
    {%- br %}
    ${env:DEBUG}           = Get-ExtendedProperty -PropertyName "DEBUG_MODE"            -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    ${env:UNLOAD_DELIM}    = Get-ExtendedProperty -PropertyName "AZ_UNLOAD_DELIMITER"   -TableName ${env:WSL_LOAD_TABLE}{% br %}
    ${env:UNLOAD_ENC}      = Get-ExtendedProperty -PropertyName "AZ_UNLOAD_ENCLOSED_BY" -TableName ${env:WSL_LOAD_TABLE}{% br %}
    ${env:UNLOAD_ESC}      = Get-ExtendedProperty -PropertyName "AZ_UNLOAD_ESCAPE_CHAR" -TableName ${env:WSL_LOAD_TABLE}{% br %}
    ${env:SPLIT_THRESHOLD} = Get-ExtendedProperty -PropertyName "AZ_SPLIT_THRESHOLD"    -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    ${env:FILE_COUNT}      = Get-ExtendedProperty -PropertyName "AZ_SPLIT_COUNT"        -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    ${env:UNICODE_SUPPORT} = Get-ExtendedProperty -PropertyName "AZ_UNICODE_SUPPORT"  -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $BLOB_MODE             = Get-ExtendedProperty -PropertyName "BLOB_MODE"           -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $TEMP_DATA_SOURCE      = Get-ExtendedProperty -PropertyName "TEMP_DATA_SOURCE"    -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $BLOB_ACCOUNT          = Get-ExtendedProperty -PropertyName "BLOB_ACCOUNT"        -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $BLOB_KEY              = Get-ExtendedProperty -PropertyName "BLOB_KEY"            -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $BLOB_PROTOCOL         = Get-ExtendedProperty -PropertyName "BLOB_PROTOCOL"       -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $BLOB_TEMP_CONTAINER   = Get-ExtendedProperty -PropertyName "BLOB_TEMP_CONTAINER" -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $SEND_FILES_ZIPPED     = Get-ExtendedProperty -PropertyName "SEND_FILES_ZIPPED"   -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    $FILE_FORMAT           = Get-ExtendedProperty -PropertyName "FILE_FORMAT"         -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    if(${env:UNICODE_SUPPORT} -ne "TRUE") { {%- br %}
        ${env:UNICODE_SUPPORT} = "FALSE"{%- br %}
    }{%- br %}
    if([string]::IsNullOrEmpty(${env:UNLOAD_DELIM})) { {%- br %}
        ${env:UNLOAD_DELIM} = "|"{%- br %}
    }{%- br %}
    if([string]::IsNullOrEmpty(${env:UNLOAD_ENC})) { {%- br %}
        ${env:UNLOAD_ENC} = '"'{%- br %}
    }{%- br %}
    if([string]::IsNullOrEmpty(${env:UNLOAD_ESC})) { {%- br %}
        ${env:UNLOAD_ESC} = ""{%- br %}
    }{%- br %}
    if(${env:FILE_COUNT} -lt 1) { {%- br %}
        ${env:FILE_COUNT} = 1{%- br %}
    }{%- br %}
    $unicode = $false
    if( ${env:UNICODE_SUPPORT} -eq "TRUE") {
        $unicode = $true
    }
    $fileType = "{{ fileType }}"
    if($fileType -eq "parquet" -And $FILE_FORMAT -eq "RED_FMT_DEL_NOZIP_PIPE"){
        $FILE_FORMAT = "RED_FMT_PARQUET"
    }
    elseif ($fileType -eq "orc" -And $FILE_FORMAT -eq "RED_FMT_DEL_NOZIP_PIPE"){
        $FILE_FORMAT = "RED_FMT_ORC"
    }
    elseif ($FILE_FORMAT -eq ""){
        $FILE_FORMAT = "RED_FMT_DEL_NOZIP_PIPE"
    }



    {% if (RunMode == "AZ") and ['csv','parquet','orc'] contains fileType %}{%- br %}
    # ========================================================
    # = Azure Data Lake Gen2 - Direct Load
    # ========================================================
    {%- br %}
    $fileName   = @'{%- br %}
{{ table.loadInfo.sourceFile.name }}{%- br %}
'@{%- br %}
    $skipHeader = 1
    if ("{{table.loadInfo.sourceFile.headerLine}}" -eq "true"){
        $skipHeader =2
    }
    $filePath   = '{{ table.loadInfo.sourceFile.path }}' + "/" + $fileName.Trim(){% br %}
    $recordDelimiter='{{table.loadInfo.sourceFile.recordDelimiter}}'
    if ($recordDelimiter.Trim() -eq "" -or $recordDelimiter.Trim() -eq "\\n"){
        $recordDelimiter = '\n'
    }
    if($filePath -Match "dfs.core.windows.net")
    {
      $dOdbcConn = New-Object System.Data.Odbc.OdbcConnection
      $dOdbcConn.ConnectionString = "DSN=${env:WSL_TGT_DSN}"

      if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) {
        $dOdbcConn.ConnectionString += ";UID=${env:WSL_TGT_USER}"
      }
      if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) {
        $dOdbcConn.ConnectionString += ";PWD=${env:WSL_TGT_PWD}"
       }
      $dOdbcConn.Open()
      $copyStatement=@"
      COPY INTO ${env:WSL_LOAD_FULLNAME}
      FROM '$filePath'
      WITH (
      CREDENTIAL=(IDENTITY= 'Shared Access Signature', SECRET= '${env:WSL_SRCCFG_azureSASToken}'),{%- br %}
      {%- if fileType == "csv" %}{%- br %}
      FIELDQUOTE = '{{table.loadInfo.sourceFile.fieldEnclosure}}',
      FIELDTERMINATOR = '{{table.loadInfo.sourceFile.fieldDelimiter}}',
      ROWTERMINATOR = '$recordDelimiter',
      FIRSTROW = $skipHeader
      {% elseif fileType == "parquet" or fileType == "orc" %}{%- br %}
      FILE_FORMAT = $FILE_FORMAT
      {%- endif %}
      )
"@
      $maskedLoad = $copyStatement{%- br %}
      if(![string]::IsNullOrWhiteSpace(${env:WSL_SRCCFG_azureSASToken})) {
         $maskedLoad = $maskedLoad.Replace(${env:WSL_SRCCFG_azureSASToken},(New-Object String ('*', ${env:WSL_SRCCFG_azureSASToken}.Length)))
      }
      if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("======= COPY INTO LOAD TABLE ======="){%- br %}
        $logStream.WriteLine($maskedLoad){%- br %}
        $logStream.WriteLine(""){%- br %}
      }{%- br %}
      {%- br %}
      if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("BEGIN COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
      }
      try { {%- br %}
            $command = New-Object System.Data.Odbc.OdbcCommand($copyStatement,$dOdbcConn){%- br %}
            $command.CommandTimeout = 0{%- br %}
            {%- br %}
            $result = $command.ExecuteNonQuery(){%- br %}
            if(${env:DEBUG} -eq "TRUE") { {%- br %}
                $logStream.WriteLine("END COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
            }{%- br %}
            $logStream.WriteLine("$result rows loaded."){%- br %}
            [Console]::WriteLine("1"){%- br %}
            [Console]::WriteLine("Load Complete. $result rows loaded."){%- br %}
            [Console]::WriteLine("Check error file in errorsfolder for rejected rows ."){%- br %}
          }{%- br %}
      catch { {%- br %}
        $logStream.WriteLine($_.Exception.Message){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Failed to select from external table into load table"){%- br %}
        {%- br %}
      }{%- br %}
    }{%- br %}
      else{
          [Console]::WriteLine("-2")
          [Console]::WriteLine("Files source is not Azure Data Lake Gen2")
      }{%- br %}
    }
   {%- else %}
    if($BLOB_MODE -ne "TRUE") {
        $BLOB_MODE = "FALSE"
    }
    {%- br %}
    {%- if RunMode == 'Windows' %}
    if([string]::IsNullOrEmpty($TEMP_DATA_SOURCE)) { {%- br %}
        $logStream.WriteLine("Temporary data source is not set"){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Temporary data source is not set"){%- br %}
        Print-Log{%- br %}
        Exit{%- br %}
    }{%- br %}
    if([string]::IsNullOrEmpty($BLOB_ACCOUNT)) { {%- br %}
        $logStream.WriteLine("Azure blob storage account is not set"){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Azure block storage account is not set"){%- br %}
        Print-Log{%- br %}
        Exit{%- br %}
    }{%- br %}
    if([string]::IsNullOrEmpty($BLOB_KEY)) { {%- br %}
        $logStream.WriteLine("Azure blob storage access key is not set"){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Azure blob storage access key is not set"){%- br %}
        Print-Log{%- br %}
        Exit{%- br %}
    }{%- br %}
    if([string]::IsNullOrEmpty($BLOB_TEMP_CONTAINER)) { {%- br %}
        $logStream.WriteLine("Azure blob storage temporary container is not set"){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Az blob storage temporary container is not set"){%- br %}
        Print-Log{%- br %}
        Exit{%- br %}
    }{%- br %}
    {%- br %}
    $fileName   = @'{%- br %}
{{ table.loadInfo.sourceFile.name }}{%- br %}
'@{%- br %}
    $skipHeader = "{{ table.loadInfo.sourceFile.headerLine }}"{% br %}
    $filePath   = '{{ table.loadInfo.sourceFile.path }}'{% br %}

    if($BLOB_MODE -ne "TRUE") { {%- br %}
        $localFilePath  = Join-Path -Path $filePath -ChildPath $fileName{%- br %}
    } else { {%- br %}
        $localFilePath  = Join-Path -Path $filePath -ChildPath $fileName{%- br %}
        $fileNameInBlob = $localFilePath.substring(3) -replace '\\', '/'{%- br %}
    }{%- br %}
    {%- else %}
    $localFilePath = $fileDat+"*"{%- br %}
    {%- endif %}
    {%- br %}

    {%- if fileType == 'xlsx' %}
    {%- br %}
    $fileName = '{{ table.loadInfo.sourceFile.name }}'.split(".")[0] + "." + '{{ table.loadInfo.sourceFile.name }}'.split(".")[2]{%- br %}
    {%- if (RunMode == 'AZ') or (RunMode == 'S3') or (RunMode == 'GCS') %}{%- br %}
    $localFilePath = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $fileName {%- br %}
    {%- elseif RunMode == 'Windows' %}{%- br %}
    $localFilePath = Join-Path -Path '{{ table.loadInfo.sourceFile.path }}' -ChildPath $fileName {%- br %}
    {%- endif %}
    {%- endif %}

    {% if (RunMode == "AZ") and ['json','xml','avro', 'xlsx'] contains fileType %}{%- br %}
    # ========================================================
    # = Azure Data Lake Gen2 - File Download
    # ========================================================

    # -- Azure Storage Account Name --
    $azStorageName = '$WSL_SRCCFG_azureStorageAccountName$'{%- br %}

    # -- Azure Storage Account Key --
    $azStorageKey = ${env:WSL_SRCCFG_azureStorageAccountAccessKey}{%- br %}

    # -- Azure Storage File System --
    $azStorageFileSystem = '$WSL_SRCCFG_azureStorageFileSystem$' {%- br %}

    # -- Az.Storage Module Import --
    {%- br %}
    try { {% br %}
        Import-Module Az.Storage
    }{% br %}
    catch { {% br %}
        $logStream.WriteLine($_.Exception.Message){% br %}
        $logStream.WriteLine("Az.Storage module is not installed. Install it using 'Install-Module Az.Storage'"){% br %}
        [Console]::WriteLine("-3"){% br %}
        [Console]::WriteLine("Failed to load required module"){% br %}
        Print-Log{% br %}
        exit{% br %}
    }{% br %}
    {% br %}
    # == $ctx is a azure authentication object ==
    $ctx = New-AzStorageContext -StorageAccountName $azStorageName -StorageAccountKey $azStorageKey {%- br %}


    $sourceFileName  =  '{{ table.loadInfo.sourceFile.name }}'.Trim(){% br %}
    $filePath   =  '{{ table.loadInfo.sourceFile.path }}'{% br %}

    # == If file is excel, change remove sheetname from source file name before downloading =={%- br %}
    {%- if fileType == 'xlsx' %}{%- br %}
    $sourceFileName = $sourceFileName.split("\")[-1].split(".")[0] + ".xlsx"
    {%- endif %}{%br%}

    # == Regex to filter azure source file path ==
    $azSourceFilePath = "$filePath" -replace "^(.*?)$azStorageFileSystem+(\/)", ""{%- br %}
    $azSourceFilePath = "$azSourceFilePath/$sourceFileName" {%- br %}

    # == $azSourceFilePath can be passed as 'somefolder/anotherfolder/salesquota.txt' or 'somefolder/anotherfolder/sales*.txt' (Wildcard can be added for multi file download) ==
    $downloadObject = Download-File-Azure-Data-Lake $ctx $azStorageFileSystem $azSourceFilePath ${env:WSL_WORKDIR} {%- br %}

    $skipHeader = "{{table.loadInfo.sourceFile.headerLine}}"{%- br %}
    $fileName = $sourceFileName{%- br %}
    $localFilePath = "${env:WSL_WORKDIR}\$fileName"{%- br %}


    {%- endif %}

    {% if (RunMode == "GCS") %}{%- br %}
    # ========================================================
    # = Google Cloud Storage - File Download
    # ========================================================

    $sourceFileName  =  '{{ table.loadInfo.sourceFile.name }}'.Trim(){% br %}
    $filePath   =  '{{ table.loadInfo.sourceFile.path }}'{% br %}

    # == If file is excel, change remove sheetname from source file name before downloading =={%- br %}
    {%- if fileType == 'xlsx' %}{%- br %}
    $sourceFileName = $sourceFileName.split("\")[-1].split(".")[0] + ".xlsx"
    {%- endif %}{%br%}

    $gcsSourceFilePath = "$filePath/$sourceFileName"{%- br %}

    # == $gcsSourceFilePath can be passed as 'somefolder/anotherfolder/salesquota.txt' or 'somefolder/anotherfolder/sales*.txt' (Wildcard can be added for multi file download) ==
    $downloadObject = Download-File-Google-Cloud $gcsSourceFilePath ${env:WSL_WORKDIR} {%- br %}

    # == Set Load Meta Data ==
    $filePath = '${env:WSL_WORKDIR}\$sourceFileName'{%- br %}
    $skipHeader = "{{table.loadInfo.sourceFile.headerLine}}"{%- br %}
    $fileName = $sourceFileName{%- br %}
    $localFilePath = "${env:WSL_WORKDIR}\$fileName"{%- br %}
    {%- endif %}

    {% if (RunMode == "S3") %}{%- br %}
    # ========================================================
    # = Amazon S3 - File Download
    # ========================================================

    $sourceFileName  =  '{{ table.loadInfo.sourceFile.name }}'.Trim(){% br %}
    $filePath   =  '{{ table.loadInfo.sourceFile.path }}'{% br %}

    # -- Amazon S3 Bucket Name --
    $s3BucketName = $($filePath -replace 's3://', '').split("/")[0]{%- br %}

    # -- Amazon S3 Access Key --
    $s3AccessKey = ${env:ACCESS_KEY}
    if (($s3AccessKey -replace '\s', '') -eq "") { {%- br %}
        $s3AccessKey = '$WSL_SRCCFG_s3AccessKey$'
    }

    # -- Amazon S3 Secret Key --
    $s3SecretKey = ${env:SECRET_KEY}
    if (($s3SecretKey -replace '\s', '') -eq "") { {%- br %}
        $s3SecretKey = ${env:WSL_SRCCFG_s3SecretKey}
    }

    # -- Amazon S3 Region Name --
    $s3RegionName = "$WSL_SRCCFG_s3Region$"{%- br %}

    # == If file is excel, change remove sheetname from source file name before downloading =={%- br %}
    {%- if fileType == 'xlsx' %}{%- br %}
    $sourceFileName = $sourceFileName.split("\")[-1].split(".")[0] + ".xlsx"
    {%- endif %}{%br%}

    # == Filter amazon s3 source file path ==
    $s3SourceFilePath = $filePath -replace "$s3BucketName/", "" -replace 's3://', ''{%- br %}

    # == $sourceFileName can be passed as 'salesquota.txt' or 'sales*.txt' (Wildcard can be added for multi file download) ==
    $downloadObject = Download-File-Amazon-S3 $s3AccessKey $s3SecretKey $s3RegionName $s3BucketName $sourceFileName $s3SourceFilePath ${env:WSL_WORKDIR} {%- br %}

    # == Set Load Meta Data ==
    $filePath = '${env:WSL_WORKDIR}\$sourceFileName'{%- br %}
    $fileName = $sourceFileName{%- br %}
    $localFilePath = "${env:WSL_WORKDIR}\$fileName"{%- br %}
    $skipHeader = "{{table.loadInfo.sourceFile.headerLine}}"{%- br %}
    {%- endif %}

    # ========================================================
    # = Database Mode
    # ========================================================
    {%- if RunMode == 'Database' %}{% br %}
    $sQuerySQL = @"
      {%- from table.columns as column where (column.sourceColumn is defined or column.transformType.code == "D") %}
        {%- if loop.first %}{%br%}    SELECT {% else %}    ,      {% endif %}
        {%- if column.transformType.code != "A" %}
          {{- column.source }}
        {%- else %}
          {%- if column.sourceTable is defined %}
            {%- fetch column.sourceTable %}
            [{{- column.sourceTable.name }}].
          {%- endif %}
          {%- fetch column.sourceColumn %}
          [{{- column.sourceColumn.name }}]
        {%- endif %}
        {%- br %}
      {%- endfrom %}
    FROM ${env:WSL_SRC_SCHEMA}.{{ table.loadInfo.sourceTables }} {{table.loadInfo.sourceTables }}{%- br %}
    {%- from table.loadInfo.whereAndGroupByClauses | lines as whereLine %}
    {{ whereLine }}{% br %}
    {%- endfrom %}
"@{%- br %}
    if(${env:DEBUG} -eq "TRUE") { {% br %}
        $logStream.WriteLine("======= EXTRACT SQL ======="){% br %}
    }{% br %}
    $logStream.WriteLine($sQuerySQL){% br %}
    $logStream.WriteLine(""){% br %}
    {% br %}
    $OdbcDump = Get-OdbcDumpSource
    Add-Type -TypeDefinition $OdbcDump -Language CSharp -ReferencedAssemblies "System.Data"
    $wslOdbc  = New-Object WhereScape.OdbcDump
    #GetDataToFile(string query, string dsn, string username, string password, string dataFile, string delimiter, int fileCount, int splitThreshold, bool addQuotes, bool unicode, string enclosedBy, string escapeChar)
    $rowCount = $wslOdbc.GetDataToFile($sQuerySQL, ${env:WSL_SRC_DSN}, ${env:WSL_SRC_USER}, ${env:WSL_SRC_PWD}, $fileDat, ${env:UNLOAD_DELIM}, ${env:FILE_COUNT}, ${env:SPLIT_THRESHOLD}, $true, $unicode, ${env:UNLOAD_ENC}, ${env:UNLOAD_ESC})
    {%- endif %}


    {% br %}
    if($BLOB_MODE -ne "TRUE") { {% br %}
        if($env:DEBUG -eq "TRUE") { {% br %}
            $logStream.WriteLine("======= BLOB STORAGE ======="){% br %}
        }{% br %}
        try { {% br %}
            Import-Module Az.Storage
        }{% br %}
        catch { {% br %}
            $logStream.WriteLine($_.Exception.Message){% br %}
            $logStream.WriteLine("Az.Storage module is not installed. Install it using 'Install-Module Az.Storage'"){% br %}
            [Console]::WriteLine("-3"){% br %}
            [Console]::WriteLine("Failed to load required module"){% br %}
            Print-Log{% br %}
            exit{% br %}
        }{% br %}
        {% br %}
        $blobContext    = New-AzStorageContext -StorageAccountName $BLOB_ACCOUNT -StorageAccountKey $BLOB_KEY
        $fileNameInBlob = "wsl.${env:WSL_LOAD_TABLE}.${env:WSL_SEQUENCE}"{% br %}
        {% br %}
        try { {% br %}
            [array]$fileList = Get-ChildItem $localFilePath{% br %}
            if($fileList.Count -lt 1) {
                $logStream.WriteLine("No files found matching '$localFilePath'")
                [Console]::WriteLine("-1")
                [Console]::WriteLine("No files found")
                Print-Log
                exit
            }
            foreach ( $file in $fileList ) {
                $loadFile     = $file.FullName
                $loadFileName = $file.Name{% br %}

                # ========================================================
                # = Windows Mode
                # ========================================================
                {% br %}
                {%- if (RunMode == 'Windows') or (RunMode == 'AZ') or (RunMode == 'S3') or (RunMode == 'GCS') %}

                {%- if (fileType == 'avro') %}
                # --------------------------------------------------------
                # - Convert Avro File To CSV
                # --------------------------------------------------------
                {% br %}
                # Convert Avro File Into CSV File
                $tempCsvFileName = $fileName -replace ".avro",".csv"
                $tempCsvFilePath = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $tempCsvFileName{%- br %}
                $convertResult = AvroToCsv $localFilePath $tempCsvFilePath "|"{%- br %}
                $convertResult = Test-Path $localFilePath{%- br %}

                if ($convertResult -eq "True") {
                    $localFilePath = $tempCsvFilePath
                    $loadFile = $localFilePath
                    $loadFileName = $tempCsvFileName
                    $logStream.WriteLine("File '$fileName' converted to csv format and temporary saved at '$tempCsvFilePath'"){% br %}
                }
                else {
                    $logStream.WriteLine($_.Exception.Message){% br %}
                    [Console]::WriteLine("-2"){% br %}
                    [Console]::WriteLine("Failed to convert avro file to csv"){% br %}
                    Print-Log{% br %}
                    exit{% br %}
                }
                {%- endif %}

                {%- if (fileType == 'json') %}
                # --------------------------------------------------------
                # - Convert Json File To CSV
                # --------------------------------------------------------
                {% br %}
                # Convert Json File Into CSV File
                $tempCsvFileName = $fileName -replace ".json",".csv"
                $tempCsvFilePath = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $tempCsvFileName{%- br %}

                $headers = @"{%- br %}
                {%- from table.columns as column where (column.sourceTable is defined or column.sourceColumn is defined or column.transformType.code == "D") %}
                {%- set sourceColumnName = "" -%}
                {%- if column.sourceColumn is defined and column.name is defined and column.transformType.code != "A"-%}
                    {%- set sourceColumnName = column.sourceColumn.name | trim -%}
                {%- endif -%}
                {{sourceColumnName}}{% br %}
                {%- if not loop.last -%}
                ,
                {%- endif -%}
                {%- endfrom -%}{% br %}
"@{%- br %}

                python "$WSL_SCRIPT_wslJsonToCsv_CODE$" $localFilePath "UTF-8" ${env:WSL_WORKDIR} $headers
                $localFilePath = $tempCsvFilePath
                $loadFile = $localFilePath
                $loadFileName = $tempCsvFileName
                $logStream.WriteLine("File '$fileName' converted to csv format and temporary saved at '$tempCsvFilePath'"){% br %}
                {%- endif %}


                {%- if (fileType == 'xml') %}
                # --------------------------------------------------------
                # - Convert Xml File To CSV
                # --------------------------------------------------------
                {% br %}
                # Convert Xml File Into CSV File
                $tempCsvFileName = $fileName -replace ".xml",".csv"
                $tempCsvFilePath = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $tempCsvFileName{%- br %}

                $headers = @"{%- br %}
                {%- from table.columns as column where (column.sourceTable is defined or column.sourceColumn is defined or column.transformType.code == "D") %}
                {%- set sourceColumnName = "" -%}
                {%- if column.sourceColumn is defined and column.name is defined and column.transformType.code != "A"-%}
                    {%- set sourceColumnName = column.sourceColumn.name | trim -%}
                {%- endif -%}
                {{sourceColumnName}}{% br %}
                {%- if not loop.last -%}
                ,
                {%- endif -%}
                {%- endfrom -%}{% br %}
"@{%- br %}

                python "$WSL_SCRIPT_wslXmlToCsv_CODE$" $localFilePath "UTF-8" ${env:WSL_WORKDIR} $headers
                $localFilePath = $tempCsvFilePath
                $loadFile = $localFilePath
                $loadFileName = $tempCsvFileName
                $logStream.WriteLine("File '$fileName' converted to csv format and temporary saved at '$tempCsvFilePath'"){% br %}
                {%- endif %}


                {%- if (fileType == 'xlsx') %}
                # --------------------------------------------------------
                # - Convert XLSX File To CSV
                # --------------------------------------------------------
                {% br %}
                # Convert Xlsx File Into CSV File

                $fileName = '{{ table.loadInfo.sourceFile.name }}'.split(".")[0] + "." + '{{ table.loadInfo.sourceFile.name }}'.split(".")[2]
                {%- if (RunMode == 'AZ') or (RunMode == 'S3') or (RunMode == 'GCS') %}{%- br %}
                $localFilePath = $localFilePath{%- br %}
                {%- elseif RunMode == 'Windows' %}{%- br %}
                $localFilePath = Join-Path -Path '{{ table.loadInfo.sourceFile.path }}' -ChildPath $fileName{%- br %}
                {%- endif %}

                $tempCsvFileName = $fileName -replace ".xlsx",".csv"
                $tempCsvFilePath = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $tempCsvFileName{%- br %}
                $sheetName = '{{ table.loadInfo.sourceFile.name }}'.split(".")[1]
                Get-ChildItem $localFilePath |
                    ForEach-Object{
                        ExcelToCsv -File $_ -Sheetname $sheetName
                    }

                if (Test-Path $tempCsvFilePath) {
                    $localFilePath = $tempCsvFilePath
                    $loadFile = $localFilePath
                    $loadFileName = $tempCsvFileName
                    $logStream.WriteLine("File '$fileName' converted to csv format and temporary saved at '$tempCsvFilePath'"){% br %}
                    Start-Sleep -Seconds 2.0
                }
                else {
                    $logStream.WriteLine($_.Exception.Message){% br %}
                    [Console]::WriteLine("-2"){% br %}
                    [Console]::WriteLine("Failed to convert Excel file to csv"){% br %}
                    Print-Log{% br %}
                    exit{% br %}
                }
                {%- endif %}

                {%- if (fileType == 'csv') or (fileType == 'xlsx') or (fileType == 'avro') or (fileType == 'json') or (fileType == 'xml') %}
                {% br %}
                # --------------------------------------------------------
                # - Delimited File
                # --------------------------------------------------------
                {% br %}
                if($skipHeader -eq "true") { {% br %}
                    $sr           = New-Object System.IO.StreamReader($loadFile){% br %}
                    $sw           = New-Object System.IO.StreamWriter("${fileDat}.${loadFileName}"){% br %}
                    $sw.AutoFlush = $true{% br %}
                    $null         = $sr.ReadLine(){% br %}
                    while ( ! $sr.EndOfStream ) { {% br %}
                        $sw.WriteLine($sr.ReadLine()){% br %}
                    }{% br %}
                    $sw.Dispose(){% br %}
                    $sr.Dispose(){% br %}
                    $logStream.WriteLine("File '$loadFile' reprocessed and saved as '${fileDat}.${loadFileName}' with headers removed"){% br %}
                    if($SEND_FILES_ZIPPED -eq "TRUE") { {% br %}
                        $loadFile      = Gzip-File "${fileDat}.${loadFileName}"{% br %}
                        $loadFileName += ".gz"
                    }{% br %}
                    else {
                        $loadFile      = "${fileDat}.${loadFileName}"
                    }
                }{% br %}
                else { {% br %}
                    if($SEND_FILES_ZIPPED -eq "TRUE") { {% br %}
                        $loadFile      = Gzip-File $loadFile{% br %}
                        $loadFileName += ".gz"
                    }{% br %}
                }{% br %}
                {%- else %}{% br %}
                # --------------------------------------------------------
                # - Non - Delimited File
                # --------------------------------------------------------
                {% br %}
                $loadFile = $localFilePath
                {% br %}
                {%- endif -%}
                # ========================================================
                # = Upload File to Blob Storage
                # ========================================================
                {% br %}
                $null = Set-AzStorageBlobContent -File $loadFile -Container $BLOB_TEMP_CONTAINER -Context $blobContext -Blob "$fileNameInBlob/$loadFileName" -Force
                $logStream.WriteLine("File '$loadFileName' uploaded to BLOB storage as '$fileNameInBlob/$loadFileName' in container '$BLOB_TEMP_CONTAINER'"){% br %}
                {%- else %}
                if($SEND_FILES_ZIPPED -eq "TRUE") { {% br %}
                    $loadFile      = Gzip-File $loadFile -RemoveOriginal{% br %}
                    $loadFileName += ".gz"
                }{% br %}
                $null = Set-AzStorageBlobContent -File $loadFile -Container $BLOB_TEMP_CONTAINER -Context $blobContext -Blob "$fileNameInBlob/$loadFileName" -Force
                $logStream.WriteLine("File '$loadFileName' uploaded to BLOB storage as '$fileNameInBlob/$loadFileName' in container '$BLOB_TEMP_CONTAINER'"){% br %}


                {%- if (fileType == 'avro') %}
                {% br %}
                # --------------------------------------------------------
                # - Remove Converted Avro File From Work Dir
                # --------------------------------------------------------
                {% br %}
                if($env:DEBUG -eq "TRUE") { {% br %}
                    $logStream.WriteLine("======= Avro File ======="){% br %}
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' not removed as debug mode is enabled"){% br %}
                }{% br %}
                else {
                    Remove-Item $tempCsvFilePath
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' removed"){% br %}
                }
                {%- endif %}


                {%- if (fileType == 'json') %}
                {% br %}
                # --------------------------------------------------------
                # - Remove Converted Json File From Work Dir
                # --------------------------------------------------------
                {% br %}
                if($env:DEBUG -eq "TRUE") { {% br %}
                    $logStream.WriteLine("======= Json File ======="){% br %}
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' not removed as debug mode is enabled"){% br %}
                }{% br %}
                else {
                    Remove-Item $tempCsvFilePath
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' removed"){% br %}
                }
                {%- endif %}

                {%- if (fileType == 'xml') %}
                {% br %}
                # --------------------------------------------------------
                # - Remove Converted Xml File From Work Dir
                # --------------------------------------------------------
                {% br %}
                if($env:DEBUG -eq "TRUE") { {% br %}
                    $logStream.WriteLine("======= Json File ======="){% br %}
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' not removed as debug mode is enabled"){% br %}
                }{% br %}
                else {
                    Remove-Item $tempCsvFilePath
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' removed"){% br %}
                }
                {%- endif %}

                {%- if (fileType == 'xlsx') %}
                {% br %}
                # --------------------------------------------------------
                # - Remove Converted XLSX File From Work Dir
                # --------------------------------------------------------
                {% br %}
                if($env:DEBUG -eq "TRUE") { {% br %}
                    $logStream.WriteLine("======= XLSX File ======="){% br %}
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' not removed as debug mode is enabled"){% br %}
                }{% br %}
                else {
                    Remove-Item $tempCsvFilePath
                    $logStream.WriteLine("Converted Local file '$tempCsvFilePath' removed"){% br %}
                }
                {%- endif %}

                {%- endif %}
            }
            $logStream.WriteLine(""){% br %}
        }{% br %}
        catch { {% br %}
            $logStream.WriteLine($_.Exception.Message){% br %}
            [Console]::WriteLine("-2"){% br %}
            [Console]::WriteLine("Upload to BLOB storage failed"){% br %}
            Print-Log{% br %}
            exit{% br %}
        }{% br %}
        {% br %}
    }{% br %}
    {% br %}
    $dOdbcConn                  = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $dOdbcConn.ConnectionString = "DSN=${env:WSL_TGT_DSN}"{% br %}
    {% br %}
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { {%- br %}
        $dOdbcConn.ConnectionString += ";UID=${env:WSL_TGT_USER}"{%- br %}
    }{%- br %}
    {%- br %}
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { {%- br %}
        $dOdbcConn.ConnectionString += ";PWD=${env:WSL_TGT_PWD}"{%- br %}
    }{%- br %}
    {%- br %}
    $dOdbcConn.Open(){%- br %}
    {%- br %}
    $extTableDrop = "IF EXISTS ({%- br %}
                       SELECT *{%- br %}
                       FROM sys.external_tables{%- br %}
                       WHERE name = 'extmp_${env:WSL_LOAD_TABLE}'{%- br %}
                       AND schema_id = (SELECT schema_id FROM sys.schemas WHERE name = '${env:WSL_LOAD_SCHEMA}'){%- br %}
                     ){%- br %}
                     DROP EXTERNAL TABLE ${env:WSL_LOAD_SCHEMA}.extmp_${env:WSL_LOAD_TABLE};"{%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("======= DROP EXTERNAL TABLE IF EXISTS ======="){%- br %}
        $logStream.WriteLine($extTableDrop){%- br %}
        $logStream.WriteLine(""){%- br %}
    }{%- br %}
    try { {%- br %}
        $null = (New-Object System.Data.Odbc.OdbcCommand($extTableDrop,$dOdbcConn)).ExecuteNonQuery(){%- br %}
    }{%- br %}
    catch { {%- br %}
        $logStream.WriteLine($_.Exception.Message){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Failed to drop existing external table"){%- br %}
        Print-Log{%- br %}
        exit{%- br %}
    }{%- br %}
    {%- br %}
    $extSQL = @"
    CREATE EXTERNAL TABLE ${env:WSL_LOAD_SCHEMA}.extmp_${env:WSL_LOAD_TABLE} {%- br %}
    {%- from table.columns as col where col.sourceColumn is defined %}
      {%- if loop.first %}    (        {% else %}    ,        {% endif %}
      [{{- col.name }}] {% if (col.fullDataType).indexOf("date") != -1 %}datetime
      {%- elseif (col.fullDataType).indexOf("time") != -1 %}datetime
      {%- else %}{%- if (fileType == 'xml') or (fileType == 'json') %}nvarchar(max){%- else %}{{ col.fullDataType }}{% endif %}{% endif %} NULL{%- br %}
    {%- endfrom %}){%- br %}

    WITH (LOCATION    = '/$fileNameInBlob/'{%- br %}
    ,     DATA_SOURCE = $TEMP_DATA_SOURCE{%- br %}
    ,     FILE_FORMAT = $FILE_FORMAT{%- br %}

    {%- if table.loadInfo.fileLoaderOptions != "" %}
    , {% from table.loadInfo.fileLoaderOptions | lines as optLine where optLine != "" %}
    {{- optLine }}{% br %}
    {%- endfrom %}
    {%- endif %}
"@{%- br %}
    if(($BLOB_MODE -eq "TRUE") -and ($skipHeader -eq "true")) { {%- br %}
        $extSQL += @"
        , REJECT_TYPE = VALUE{%- br %}
        , REJECT_VALUE = 1{%- br %}
"@{%- br %}
    }{%- br %}
    $extSQL += "
    );"{%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("======= CREATE EXTERNAL TABLE ======="){%- br %}
        $logStream.WriteLine($extSQL){%- br %}
        $logStream.WriteLine(""){%- br %}
    }{%- br %}
    {%- br %}
    try { {%- br %}
        $null = (New-Object System.Data.Odbc.OdbcCommand($extSQL,$dOdbcConn)).ExecuteNonQuery(){%- br %}
    }{%- br %}
    catch { {%- br %}
        $logStream.WriteLine($_.Exception.Message){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Failed to create external table for temporary BLOB file"){%- br %}
        Print-Log{%- br %}
        exit{%- br %}
    }{%- br %}
    {%- br %}
    $tgtInsSQL = "INSERT INTO ${env:WSL_LOAD_FULLNAME} {%- br %}
                  {%- from table.columns as col %}
                    {%- if not loop.first %}                  ,     {% else %}                  (     {% endif %}
                    [{{- col.name }}]{% br %}
                  {%- endfrom %}                  ){% br %}

                  {%- from table.columns as col %}
                    {%- if not loop.first %}                  ,     {% else %}                  SELECT {% endif %}
                    {%- if col.transformType.code == "A" %}{{ col.source }}
                    {%- elseif (col.fullDataType).indexOf("date") != -1 %}CAST([{{- col.name }}] AS {{ col.fullDataType }})
                    {%- elseif (col.fullDataType).indexOf("time") != -1 %}CAST([{{- col.name }}] AS {{ col.fullDataType }})
                    {%- else %}{%- if (fileType == 'xml') or (fileType == 'json') %}TRY_CONVERT({{ col.fullDataType }}, [{{ col.name }}]){%- else %}[{{ col.name }}]{% endif %}{% endif %}{% br %}
                  {%- endfrom %}
                  FROM ${env:WSL_LOAD_SCHEMA}.extmp_${env:WSL_LOAD_TABLE};"{%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("======= LOAD TABLE INSERT ======="){%- br %}
        $logStream.WriteLine($tgtInsSQL){%- br %}
        $logStream.WriteLine(""){%- br %}
    }{%- br %}
    {%- br %}
    try { {%- br %}
        $command = New-Object System.Data.Odbc.OdbcCommand($tgtInsSQL,$dOdbcConn){%- br %}
        $command.CommandTimeout = 0{%- br %}
        {%- br %}
        $result = $command.ExecuteNonQuery(){%- br %}
    }{%- br %}
    catch { {%- br %}
        $logStream.WriteLine($_.Exception.Message){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Failed to select from external table into load table"){%- br %}
        {%- br %}
        $cleanupSQL = "DROP EXTERNAL TABLE ${env:WSL_LOAD_SCHEMA}.extmp_${env:WSL_LOAD_TABLE};"{%- br %}
        {%- br %}
        if($env:DEBUG -eq "TRUE") { {%- br %}
            $logStream.WriteLine("======= CLEANUP ======="){%- br %}
            $logStream.WriteLine($cleanupSQL){%- br %}
            $logStream.WriteLine(""){%- br %}
        }{%- br %}
        {%- br %}
        try { {%- br %}
            $null = (New-Object System.Data.Odbc.OdbcCommand($cleanupSQL,$dOdbcConn)).ExecuteNonQuery(){%- br %}
        }{%- br %}
        catch { {%- br %}
            $logStream.WriteLine($_.Exception.Message){%- br %}
            $logStream.WriteLine("Failed to drop external table"){%- br %}
        }{%- br %}
        Print-Log{%- br %}
        exit{%- br %}
    }{%- br %}
    {%- br %}
    $cleanupSQL = "DROP EXTERNAL TABLE ${env:WSL_LOAD_SCHEMA}.extmp_${env:WSL_LOAD_TABLE};"{%- br %}
    {%- br %}
    if($env:DEBUG -eq "TRUE") { {%- br %}
        $logStream.WriteLine("======= CLEANUP ======="){%- br %}
        $logStream.WriteLine($cleanupSQL){%- br %}
        $logStream.WriteLine(""){%- br %}
    }{%- br %}
    {%- br %}
    try { {%- br %}
        $null = (New-Object System.Data.Odbc.OdbcCommand($cleanupSQL,$dOdbcConn)).ExecuteNonQuery(){%- br %}
    }{%- br %}
    catch { {%- br %}
        $logStream.WriteLine($_.Exception.Message){%- br %}
        $logStream.WriteLine("Failed to drop external table"){%- br %}
        [Console]::WriteLine("-1"){%- br %}
        [Console]::WriteLine("Load complete. $result rows loaded."){%- br %}
        Print-Log{%- br %}
        exit{%- br %}
    }{%- br %}
    {%- br %}
    $dOdbcConn.Close(){%- br %}
    {%- br %}
    if($BLOB_MODE -ne "TRUE") { {%- br %}
        if(${env:DEBUG} -eq "true") { {%- br %}
            $logStream.WriteLine("File '$fileNameInBlob' not removed from BLOB storage as debug mode is enabled"){%- br %}
            $logStream.WriteLine("Local file '$localFilePath' not removed as debug mode is enabled"){%- br %}
            $logStream.WriteLine(""){%- br %}
        }{%- br %}
        else { {%- br %}
            try { {%- br %}
                $null = Get-AzStorageBlob -Container $BLOB_TEMP_CONTAINER -Context $blobContext -Blob $fileNameInBlob* | Remove-AzStorageBlob
            }{%- br %}
            catch { {%- br %}
                $logStream.WriteLine($_.Exception.Message){%- br %}
                $logStream.WriteLine("Failed to delete '$fileNameInBlob' from BLOB storage"){%- br %}
                [Console]::WriteLine("-1"){%- br %}
                [Console]::WriteLine("Load Complete. $result rows loaded."){%- br %}
                Print-Log{%- br %}
                exit{%- br %}
            }{%- br %}
            try { {%- br %}
            {%- if RunMode == 'Windows' %}
               [array]$fileList = Get-ChildItem $fileDat*
            {%- else %}
               if($SEND_FILES_ZIPPED -eq "TRUE") {
                  $localFilePath += ".gz"
               }
               [array]$fileList = Get-ChildItem $localFilePath
            {%- endif %}{%br%}
               if($fileList.Count -lt 1) {
                  $logStream.WriteLine("No files found matching '$localFilePath'")
                  [Console]::WriteLine("-1")
                  [Console]::WriteLine("No files found")
                  Print-Log
                  exit
               }
               foreach ( $file in $fileList ) {
                  $null = Remove-Item $file
               }
               $logStream.WriteLine("")
            }
            catch {
                $logStream.WriteLine($_.Exception.Message)
                $logStream.WriteLine("Failed to delete local file '$localFilePath'")
                [Console]::WriteLine("-1")
                [Console]::WriteLine("Load Complete. $result rows loaded.")
                Print-Log
                exit
            }

        }{%- br %}
    }{%- br %}
    {%- br %}
    {% if (table.loadInfo.archiveFile.path != "") or (table.loadInfo.archiveFile.name != "") and (RunMode == 'Windows') %}
    $ArchivePath = @'{%- br %}
{{ table.loadInfo.archiveFile.path }}{%- br %}
'@{%- br %}
    $ArchiveName = @'{%- br %}
{{ table.loadInfo.archiveFile.name }}{%- br %}
'@{%- br %}
    {%- br %}
    {%- br %}
    if($BLOB_MODE -ne "TRUE") { {%- br %}
        {%- br %}
        if([string]::IsNullOrWhitespace($ArchivePath)) { {%- br %}
            {%- br %}
            $ArchivePath = $filePath{%- br %}
            {%- br %}
        }{%- br %}
        {%- br %}
        if( ! $ArchivePath.EndsWith('\')) { {%- br %}
            {%- br %}
            $ArchivePath += "\"{%- br %}
            {%- br %}
        }{%- br %}
        try { {%- br %}
            {%- br %}
            $dir  = Replace-WslTags(${ArchivePath}){%- br %}
            $fil  = Replace-WslTags(${ArchiveName}){%- br %}
            $path = $dir + $fil
            if( ! (Test-Path -Path $dir)) {
                $null = New-Item -ItemType Directory -Path $dir
            }
            Move-Item $($filePath + $fileName) $path -ErrorAction Stop{%- br %}
            $logStream.WriteLine("Source file moved to " + $path){%- br %}
            {%- br %}
        }{%- br %}
        catch { {%- br %}
            {%- br %}
            ${env:warn} = $true{%- br %}
            $logStream.WriteLine("Failed to move '" + $filePath + $fileName + "' to " + $path){%- br %}
            $logStream.WriteLine($_.Exception.Message){%- br %}
            {%- br %}
        } {%- br %}
    }{%- br %}
    else { {%- br %}
        $logStream.WriteLine("File archiving not supported for direct Azure BLOB storage loads"){%- br %}
    }{%- br %}
    {%- br %}
    {% endif %}
    if(${env:warn} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("$result rows loaded with warnings."){%- br %}
        [Console]::WriteLine("-1"){%- br %}
        [Console]::WriteLine("Load Completed with warnings. $result rows loaded."){%- br %}
    }{%- br %}
    else { {%- br %}
        $logStream.WriteLine("$result rows loaded."){%- br %}
        [Console]::WriteLine("1"){%- br %}
        [Console]::WriteLine("Load Complete. $result rows loaded."){%- br %}
    }{%- br %}
}{%- br %}
    {%- endif %}{%- br %}
try { {%- br %}
    $fileAud             = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "wsl.${env:WSL_LOAD_TABLE}.${env:WSL_SEQUENCE}.txt"{%- br %}
    $logStream           = New-Object IO.StreamWriter($FileAud,$false){%- br %}
    $logStream.AutoFlush = $true{%- br %}
    $fileDat             = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "wsl.${env:WSL_LOAD_TABLE}.${env:WSL_SEQUENCE}.dat"{%- br %}
    {%- br %}
    Load-Data{%- br %}
    Print-Log
    exit
}{%- br %}
catch { {%- br %}
    $logStream.WriteLine("Unhandled Exception"){%- br %}
    $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
    $logStream.WriteLine($_.Exception.Message){%- br %}
    [Console]::WriteLine("-2"){%- br %}
    [Console]::WriteLine("Load Failed"){%- br %}
    Print-Log
    exit
}{%- br %}
